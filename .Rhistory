command = "jekyll build --destination ../yvescr.github.io/")
## build the blog:
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
## build the blog:
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
getwd()
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
## build the blog:
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
## build the blog:
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
## build the blog:
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
install.packages("prettydoc")
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
exp(6)
round(exp(6) / (res_square_meter * 1e-4), 0)
path_data <- ifelse(interactive(), "../data", "../data")
load(paste0(path_data, "/coord_df_lim_2.Rda")) # coord.df.lim
pacman::p_load(tidyverse, ggmap, scales)
coord.df.lim.2 <- coord.df.lim  %>% select(lon, lat, date, hour, day_week)
path_data <- ifelse(interactive(), "../data", "../data")
load(paste0(path_data, "/coord_df_lim_2.Rda")) # coord.df.lim
getwd()
path_data <- ifelse(interactive(), "data", "../data")
load(paste0(path_data, "/coord_df_lim_2.Rda")) # coord.df.lim
pacman::p_load(tidyverse, ggmap, scales)
coord.df.lim.2 <- coord.df.lim  %>% select(lon, lat, date, hour, day_week)
# min amd max longitude in a specific variable:
mean_lon <- mean(coord.df.lim.2$lon)
mean_lat <- mean(coord.df.lim.2$lat)
min_lon <- min(coord.df.lim.2$lon)
min_lat <- min(coord.df.lim.2$lat)
max_lon <- max(coord.df.lim.2$lon)
max_lat <- max(coord.df.lim.2$lat)
# dl the map layer:
my_map <- ggmap::get_map(location = c(min_lon - 0.01, min_lat - 0.01,
max_lon + 0.01, max_lat + 0.01),
maptype = "terrain", zoom = 11)
# define the theme:
theme_map_london <- theme(axis.title = element_blank(),
#axis.text = element_blank(),
#axis.ticks = element_blank(),
panel.background = element_blank(),
plot.background = element_blank())
# number of points in grid
grid_point <- 100
# plot the graph:
ggmap::ggmap(my_map) +
geom_density2d(data = coord.df.lim.2,
aes(x = lon, y = lat), size = 0.3) +
stat_density2d(data = coord.df.lim.2,
aes(x = lon, y = lat, fill = log(..level..)),
n = grid_point,
geom = "polygon",
alpha = 0.5) +
scale_fill_gradient("Density\nlog scale", low = "green", high = "red") +
theme_map_london
grid_lat <- (max_lat - min_lat)/ grid_point
grid_lon <- (max_lon - min_lon)/ grid_point
p <- rbind(c(min_lat, min_lon), c(min_lat + grid_lat, min_lon),
c(min_lat + grid_lat, min_lon + grid_lon),
c(min_lat, min_lon + grid_lon), c(min_lat, min_lon))
res_square_meter <- geosphere::areaPolygon(p)
# square meters in one square of the grid
round(exp(6) / (res_square_meter * 1e-4), 0)
# number of points per day:
date_hour_freq <- coord.df.lim %>%
group_by(date, day_week, hour) %>%
summarise(count = n())
date_freq <- date_hour_freq %>%
group_by(date) %>%
summarise(count_date = sum(count))
# We add the top line for the date
max_hour_freq <- date_hour_freq %>%
group_by(date) %>%
summarise(max_hour_freq = max(count))
# an hour is arbitrarily choosen among the top hours
date_freq_max_hour <- merge(merge(date_hour_freq, date_freq, by = "date"),
max_hour_freq, by = "date") %>%
filter(count == max_hour_freq) %>%
group_by(date) %>%
slice(1)
# Let's represent it on a graph:
ggplot(data = date_freq_max_hour, aes(x = date, y = count)) +
geom_line() +
geom_point(aes(color = hour)) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45))
pacman::p_load(tidyverse, ggmap, scales)
# Let's represent it on a graph:
ggplot(data = date_freq_max_hour, aes(x = date, y = count)) +
geom_line() +
geom_point(aes(color = hour)) +
#  scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45))
library(scales)
# Let's represent it on a graph:
ggplot(data = date_freq_max_hour, aes(x = date, y = count)) +
geom_line() +
geom_point(aes(color = hour)) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45))
# Let's represent it on a graph:
ggplot(data = date_freq_max_hour, aes(x = date, y = count)) +
geom_line() +
geom_point(aes(color = hour)) +
scale_x_date(breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45))
hour_freq <- date_hour_freq %>%
group_by(hour) %>%
summarise(freq = sum(count))
ggplot(hour_freq, aes(x = hour, y = freq)) +
geom_col()
hour_freq <- date_hour_freq %>%
group_by(hour) %>%
summarise(freq = sum(count))
install.packages("ggplot2")
install.packages("ggplot2")
hour_freq <- date_hour_freq %>%
group_by(hour) %>%
summarise(freq = sum(count))
ggplot(hour_freq, aes(x = hour, y = freq)) +
geom_col()
pacman::p_load(tidyverse, ggmap, scales)
# number of points per day:
date_hour_freq <- coord.df.lim %>%
group_by(date, day_week, hour) %>%
summarise(count = n())
date_freq <- date_hour_freq %>%
group_by(date) %>%
summarise(count_date = sum(count))
# We add the top line for the date
max_hour_freq <- date_hour_freq %>%
group_by(date) %>%
summarise(max_hour_freq = max(count))
# an hour is arbitrarily choosen among the top hours
date_freq_max_hour <- merge(merge(date_hour_freq, date_freq, by = "date"),
max_hour_freq, by = "date") %>%
filter(count == max_hour_freq) %>%
group_by(date) %>%
slice(1)
# Let's represent it on a graph:
ggplot(data = date_freq_max_hour, aes(x = date, y = count)) +
geom_line() +
geom_point(aes(color = hour)) +
scale_x_date(breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45))
# Let's represent it on a graph:
ggplot(data = date_freq_max_hour, aes(x = date, y = count)) +
geom_line() +
geom_point(aes(color = hour)) +
scale_x_date(date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45))
hour_freq <- date_hour_freq %>%
group_by(hour) %>%
summarise(freq = sum(count))
ggplot(hour_freq, aes(x = hour, y = freq)) +
geom_col()
map_by_hour <- ggmap::ggmap(my_map) +
#  geom_density2d(data = coord.df.lim.2,
#    aes(x = lon, y = lat), size = 0.3) +
stat_density2d(data = coord.df.lim.2,
aes(x = lon, y = lat, fill = log(..level..)),
n = grid_point,
geom = "polygon",
alpha = 0.5) +
scale_fill_gradient("Density\nlog scale", low = "green", high = "red") +
theme_map_london +
facet_wrap(~hour)
map_by_hour <- ggmap::ggmap(my_map) +
#  geom_density2d(data = coord.df.lim.2,
#    aes(x = lon, y = lat), size = 0.3) +
stat_density2d(data = coord.df.lim.2,
aes(x = lon, y = lat, fill = log(..level..)),
n = grid_point,
geom = "polygon",
alpha = 0.5) +
scale_fill_gradient("Density\nlog scale", low = "green", high = "red") +
theme_map_london +
facet_wrap(~hour)
install.packages("ggmap")
install.packages("ggmap")
map_by_hour <- ggmap::ggmap(my_map) +
#  geom_density2d(data = coord.df.lim.2,
#    aes(x = lon, y = lat), size = 0.3) +
stat_density2d(data = coord.df.lim.2,
aes(x = lon, y = lat, fill = log(..level..)),
n = grid_point,
geom = "polygon",
alpha = 0.5) +
scale_fill_gradient("Density\nlog scale", low = "green", high = "red") +
theme_map_london +
facet_wrap(~hour)
pacman::p_load(tidyverse, ggmap, scales)
# plot the graph:
map_by_hour <- ggmap::ggmap(my_map) +
#  geom_density2d(data = coord.df.lim.2,
#    aes(x = lon, y = lat), size = 0.3) +
stat_density2d(data = coord.df.lim.2,
aes(x = lon, y = lat, fill = log(..level..)),
n = grid_point,
geom = "polygon",
alpha = 0.5) +
scale_fill_gradient("Density\nlog scale", low = "green", high = "red") +
theme_map_london +
facet_wrap(~hour)
ggsave(plot = map_by_hour, filename = "map_by_hour.png", width = 20, height = 20, dpi = 300)
week_freq <- date_hour_freq %>%
group_by(day_week) %>%
summarise(freq = sum(count))
ggplot(week_freq, aes(x = day_week, y = freq)) +
geom_col()
# plot the graph:
ggmap::ggmap(my_map) +
# geom_density2d(data = coord.df.lim.2,
# aes(x = lon, y = lat), size = 0.3) +
stat_density2d(data = coord.df.lim.2,
aes(x = lon, y = lat, fill = log(..level..)),
n = grid_point,
geom = "polygon",
alpha = 0.5) +
scale_fill_gradient("Density\nlog scale", low = "green", high = "red") +
theme_map_london +
facet_wrap(~day_week)
# Number of rows with an activity:
comp_activity <- sum(1-sapply(coord.df.lim$activitys, is.null))
# Percentage of rows with an activity:
pct_activity <- sprintf("%.1f%%", comp_activity / nrow(coord.df.lim) * 100)
# reshape the dataset:
index_non_null <- which(!sapply(coord.df.lim$activitys, is.null))
activities_df <- plyr::ldply(index_non_null,
function(x) data.frame(coord.df.lim[x, c("timestampMs", "lat", "lon")],
plyr::ldply(1:length(coord.df.lim$activitys[[x]]$timestampMs),
function(y) data.frame(timestamp_act = coord.df.lim$activitys[[x]]$timestampMs[y],
type = coord.df.lim$activitys[[x]]$activities[[y]]$type,
confidence = coord.df.lim$activitys[[x]]$activities[[y]]$confidence,
stringsAsFactors = F)
)
, row.names = NULL)
)
# clean the dates
activities_df <- activities_df %>%
mutate(date_time = as.POSIXct(as.numeric(timestampMs)/1000,
origin = "1970-01-01"),
date_time_activity = as.POSIXct(as.numeric(timestamp_act)/1000,
origin = "1970-01-01") ) %>%
mutate(diff_minute = (date_time - date_time_activity)/60)
activities_df_limit <- activities_df %>% filter(confidence > 90)
ggplot(data = activities_df) +
stat_density(aes(x = diff_minute, y = ..count..)) +
scale_x_continuous(name = "Minutes", labels = comma) +
ggtitle("Minutes Between Original Timestamp and Activity Timestamp")
ggplot(data = activities_df) +
stat_count(aes(x = type)) +
scale_y_continuous(labels = comma) +
ggtitle("Type of Activity, No Limit on Confidence")
activities_df_limit <- activities_df %>% filter(confidence > 90)
ggplot(data = activities_df_limit) +
stat_count(aes(x = type)) +
scale_y_continuous(labels = comma) +
ggtitle("Type of Activity, Limit on Confidence")
# Heatmap per weekday
# plot the graph:
map_by_type <- ggmap::ggmap(my_map) +
stat_density2d(data = activities_df_limit,
aes(x = lon, y = lat, fill = log(..level..)),
n = grid_point,
geom = "polygon",
alpha = 0.5) +
scale_fill_gradient("Density\nlog scale", low = "green", high = "red") +
theme_map_london +
facet_wrap(~type)
map_by_type <- ggmap::ggmap(my_map) +
stat_density2d(data = activities_df_limit,
aes(x = lon, y = lat, fill = log(..level..)),
n = grid_point,
geom = "polygon",
alpha = 0.5) +
scale_fill_gradient("Density\nlog scale", low = "green", high = "red") +
theme_map_london +
facet_wrap(~type)
ggsave(plot = map_by_type, filename = "map_by_type.png", width = 20, height = 20, dpi = 300)
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
## build the blog:
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
## build the blog:
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
## build the blog:
# check the path.
getwd()
# serve the blog subfolder:
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
install.packages("benchmarkme")
res = benchmark_std(runs = 3)
library(benchmarkme)
res = benchmark_std(runs = 3)
upload_results(res)
plot(res)
getwd()
# serve the blog subfolder:
getwd()
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
get_rid_js <- function(x) {
art <- readLines(paste0("../yvescr.github.io/", x, "/index.html"))
art <- art[!grepl('<script src="https://yvescr.github.io/assets/js/main.min.js"></script>', art)]
cat(art, file=paste0("../yvescr.github.io/", x, "/index.html"), quote = F, fill=T)
}
lapply(X = c("hack/embedocputest", "hack/Presentation_of_the_Ropencorporate_package",
"hack/Second_ropencorporate_pckg", "data visualisation/MapUKpartI", "Statistic/RTNSE_blog"),
FUN = get_rid_js)
getwd()
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
getwd()
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
load("../data/dpt_count_act.rda")
getwd()
servr::jekyll(input = "_source", output = "_posts", script = c("build.R"),
command = "jekyll build --destination ../yvescr.github.io/")
devtools::install_github("cvescr")
devtools::install_github("yvesCr/AppMapActivity")
devtools::install_github("yvesCr/AppMapActivity")
